#include <touchgfx/Font.hpp>

FONT_KERNING_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::KerningNode kerning_arial_22_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE =
{
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0020, space], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0020, space], Kerning dist = -1)
    { 0x0391, -1 },  // (First char = [0x0391, Alpha], Second char = [0x0020, space], Kerning dist = -1)
    { 0x0394, -1 },  // (First char = [0x0394, Delta], Second char = [0x0020, space], Kerning dist = -1)
    { 0x039B, -1 },  // (First char = [0x039B, Lambda], Second char = [0x0020, space], Kerning dist = -1)
    { 0x0046, -2 },  // (First char = [0x0046, F], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0050, -2 },  // (First char = [0x0050, P], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x002C, comma], Kerning dist = -1)
    { 0x0393, -2 },  // (First char = [0x0393, Gamma], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x03A1, -2 },  // (First char = [0x03A1, Rho], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x03A5, -2 },  // (First char = [0x03A5, Upsilon], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0403, -2 },  // (First char = [0x0403, uni0403], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0413, -2 },  // (First char = [0x0413, uni0413], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0420, -4 },  // (First char = [0x0420, uni0420], Second char = [0x002C, comma], Kerning dist = -4)
    { 0x0422, -2 },  // (First char = [0x0422, uni0422], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0423, -3 },  // (First char = [0x0423, uni0423], Second char = [0x002C, comma], Kerning dist = -3)
    { 0x0433, -2 },  // (First char = [0x0433, uni0433], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0442, -2 },  // (First char = [0x0442, uni0442], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0443, -2 },  // (First char = [0x0443, uni0443], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x045E, -2 },  // (First char = [0x045E, uni045E], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0490, -2 },  // (First char = [0x0490, uni0490], Second char = [0x002C, comma], Kerning dist = -2)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x002D, hyphen], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x002D, hyphen], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x002D, hyphen], Kerning dist = -2)
    { 0x03A5, -2 },  // (First char = [0x03A5, Upsilon], Second char = [0x002D, hyphen], Kerning dist = -2)
    { 0x0046, -2 },  // (First char = [0x0046, F], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0050, -2 },  // (First char = [0x0050, P], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0056, -2 },  // (First char = [0x0056, V], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0072, -1 },  // (First char = [0x0072, r], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0077, -1 },  // (First char = [0x0077, w], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0079, -1 },  // (First char = [0x0079, y], Second char = [0x002E, period], Kerning dist = -1)
    { 0x0393, -2 },  // (First char = [0x0393, Gamma], Second char = [0x002E, period], Kerning dist = -2)
    { 0x03A1, -2 },  // (First char = [0x03A1, Rho], Second char = [0x002E, period], Kerning dist = -2)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x002E, period], Kerning dist = -2)
    { 0x03A5, -2 },  // (First char = [0x03A5, Upsilon], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0403, -2 },  // (First char = [0x0403, uni0403], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0413, -2 },  // (First char = [0x0413, uni0413], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0420, -4 },  // (First char = [0x0420, uni0420], Second char = [0x002E, period], Kerning dist = -4)
    { 0x0422, -2 },  // (First char = [0x0422, uni0422], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0423, -3 },  // (First char = [0x0423, uni0423], Second char = [0x002E, period], Kerning dist = -3)
    { 0x0433, -2 },  // (First char = [0x0433, uni0433], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0442, -2 },  // (First char = [0x0442, uni0442], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0443, -2 },  // (First char = [0x0443, uni0443], Second char = [0x002E, period], Kerning dist = -2)
    { 0x045E, -2 },  // (First char = [0x045E, uni045E], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0490, -2 },  // (First char = [0x0490, uni0490], Second char = [0x002E, period], Kerning dist = -2)
    { 0x0031, -1 },  // (First char = [0x0031, one], Second char = [0x0031, one], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x003A, colon], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x003A, colon], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x003A, colon], Kerning dist = -1)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x003A, colon], Kerning dist = -2)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x003A, colon], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x003B, semicolon], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x003B, semicolon], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x003B, semicolon], Kerning dist = -1)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x003B, semicolon], Kerning dist = -2)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x003B, semicolon], Kerning dist = -1)
    { 0x0020, -1 },  // (First char = [0x0020, space], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0046, -1 },  // (First char = [0x0046, F], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0041, A], Kerning dist = -1)
    { 0x00A0, -1 },  // (First char = [0x00A0, space], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0054, T], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0056, V], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0056, V], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0057, W], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0057, W], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0061, a], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0063, c], Kerning dist = -2)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0069, i], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0069, i], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0070, p], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0071, q], Kerning dist = -2)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0073, s], Kerning dist = -2)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0075, u], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0075, u], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0075, u], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0077, w], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x0079, y], Kerning dist = -1)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x00A0, space], Kerning dist = -1)
    { 0x004C, -1 },  // (First char = [0x004C, L], Second char = [0x00A0, space], Kerning dist = -1)
    { 0x0391, -1 },  // (First char = [0x0391, Alpha], Second char = [0x00A0, space], Kerning dist = -1)
    { 0x0394, -1 },  // (First char = [0x0394, Delta], Second char = [0x00A0, space], Kerning dist = -1)
    { 0x039B, -1 },  // (First char = [0x039B, Lambda], Second char = [0x00A0, space], Kerning dist = -1)
    { 0x0403, -1 },  // (First char = [0x0403, uni0403], Second char = [0x00AB, guillemotleft], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x00AB, guillemotleft], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x00AB, guillemotleft], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x00AB, guillemotleft], Kerning dist = -1)
    { 0x0490, -2 },  // (First char = [0x0490, uni0490], Second char = [0x00AB, guillemotleft], Kerning dist = -2)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x00AD, hyphen], Kerning dist = -1)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x00AD, hyphen], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x00AD, hyphen], Kerning dist = -2)
    { 0x03A5, -2 },  // (First char = [0x03A5, Upsilon], Second char = [0x00AD, hyphen], Kerning dist = -2)
    { 0x0403, -1 },  // (First char = [0x0403, uni0403], Second char = [0x00BB, guillemotright], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x00BB, guillemotright], Kerning dist = -1)
    { 0x0420, -1 },  // (First char = [0x0420, uni0420], Second char = [0x00BB, guillemotright], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x00BB, guillemotright], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x00BB, guillemotright], Kerning dist = -1)
    { 0x0490, -2 },  // (First char = [0x0490, uni0490], Second char = [0x00BB, guillemotright], Kerning dist = -2)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x037E, semicolon], Kerning dist = -2)
    { 0x0056, -1 },  // (First char = [0x0056, V], Second char = [0x037E, semicolon], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x037E, semicolon], Kerning dist = -1)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x037E, semicolon], Kerning dist = -2)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x037E, semicolon], Kerning dist = -1)
    { 0x0020, -1 },  // (First char = [0x0020, space], Second char = [0x0386, Alphatonos], Kerning dist = -1)
    { 0x00A0, -1 },  // (First char = [0x00A0, space], Second char = [0x0386, Alphatonos], Kerning dist = -1)
    { 0x038E,  2 },  // (First char = [0x038E, Upsilontonos], Second char = [0x0390, iotadieresistonos], Kerning dist = 2)
    { 0x0393,  2 },  // (First char = [0x0393, Gamma], Second char = [0x0390, iotadieresistonos], Kerning dist = 2)
    { 0x03A4,  2 },  // (First char = [0x03A4, Tau], Second char = [0x0390, iotadieresistonos], Kerning dist = 2)
    { 0x03A5,  2 },  // (First char = [0x03A5, Upsilon], Second char = [0x0390, iotadieresistonos], Kerning dist = 2)
    { 0x03AB,  2 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x0390, iotadieresistonos], Kerning dist = 2)
    { 0x0020, -1 },  // (First char = [0x0020, space], Second char = [0x0391, Alpha], Kerning dist = -1)
    { 0x00A0, -1 },  // (First char = [0x00A0, space], Second char = [0x0391, Alpha], Kerning dist = -1)
    { 0x038E, -1 },  // (First char = [0x038E, Upsilontonos], Second char = [0x0391, Alpha], Kerning dist = -1)
    { 0x0393, -2 },  // (First char = [0x0393, Gamma], Second char = [0x0391, Alpha], Kerning dist = -2)
    { 0x03A1, -1 },  // (First char = [0x03A1, Rho], Second char = [0x0391, Alpha], Kerning dist = -1)
    { 0x03A4, -1 },  // (First char = [0x03A4, Tau], Second char = [0x0391, Alpha], Kerning dist = -1)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x0391, Alpha], Kerning dist = -1)
    { 0x03A6, -1 },  // (First char = [0x03A6, Phi], Second char = [0x0391, Alpha], Kerning dist = -1)
    { 0x03AB, -1 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x0391, Alpha], Kerning dist = -1)
    { 0x0020, -1 },  // (First char = [0x0020, space], Second char = [0x0394, Delta], Kerning dist = -1)
    { 0x00A0, -1 },  // (First char = [0x00A0, space], Second char = [0x0394, Delta], Kerning dist = -1)
    { 0x038E, -1 },  // (First char = [0x038E, Upsilontonos], Second char = [0x0394, Delta], Kerning dist = -1)
    { 0x0393, -2 },  // (First char = [0x0393, Gamma], Second char = [0x0394, Delta], Kerning dist = -2)
    { 0x03A1, -1 },  // (First char = [0x03A1, Rho], Second char = [0x0394, Delta], Kerning dist = -1)
    { 0x03A4, -1 },  // (First char = [0x03A4, Tau], Second char = [0x0394, Delta], Kerning dist = -1)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x0394, Delta], Kerning dist = -1)
    { 0x03AB, -1 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x0394, Delta], Kerning dist = -1)
    { 0x038E, -1 },  // (First char = [0x038E, Upsilontonos], Second char = [0x0398, Theta], Kerning dist = -1)
    { 0x039A, -1 },  // (First char = [0x039A, Kappa], Second char = [0x0398, Theta], Kerning dist = -1)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x0398, Theta], Kerning dist = -1)
    { 0x03AB, -1 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x0398, Theta], Kerning dist = -1)
    { 0x0020, -1 },  // (First char = [0x0020, space], Second char = [0x039B, Lambda], Kerning dist = -1)
    { 0x00A0, -1 },  // (First char = [0x00A0, space], Second char = [0x039B, Lambda], Kerning dist = -1)
    { 0x038E, -1 },  // (First char = [0x038E, Upsilontonos], Second char = [0x039B, Lambda], Kerning dist = -1)
    { 0x0393, -2 },  // (First char = [0x0393, Gamma], Second char = [0x039B, Lambda], Kerning dist = -2)
    { 0x03A1, -1 },  // (First char = [0x03A1, Rho], Second char = [0x039B, Lambda], Kerning dist = -1)
    { 0x03A4, -1 },  // (First char = [0x03A4, Tau], Second char = [0x039B, Lambda], Kerning dist = -1)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x039B, Lambda], Kerning dist = -1)
    { 0x03AB, -1 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x039B, Lambda], Kerning dist = -1)
    { 0x038E, -1 },  // (First char = [0x038E, Upsilontonos], Second char = [0x039F, Omicron], Kerning dist = -1)
    { 0x039A, -1 },  // (First char = [0x039A, Kappa], Second char = [0x039F, Omicron], Kerning dist = -1)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x039F, Omicron], Kerning dist = -1)
    { 0x03AB, -1 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x039F, Omicron], Kerning dist = -1)
    { 0x0386, -1 },  // (First char = [0x0386, Alphatonos], Second char = [0x03A4, Tau], Kerning dist = -1)
    { 0x0391, -1 },  // (First char = [0x0391, Alpha], Second char = [0x03A4, Tau], Kerning dist = -1)
    { 0x0394, -1 },  // (First char = [0x0394, Delta], Second char = [0x03A4, Tau], Kerning dist = -1)
    { 0x039B, -1 },  // (First char = [0x039B, Lambda], Second char = [0x03A4, Tau], Kerning dist = -1)
    { 0x0386, -1 },  // (First char = [0x0386, Alphatonos], Second char = [0x03A5, Upsilon], Kerning dist = -1)
    { 0x038C, -1 },  // (First char = [0x038C, Omicrontonos], Second char = [0x03A5, Upsilon], Kerning dist = -1)
    { 0x0391, -1 },  // (First char = [0x0391, Alpha], Second char = [0x03A5, Upsilon], Kerning dist = -1)
    { 0x0394, -1 },  // (First char = [0x0394, Delta], Second char = [0x03A5, Upsilon], Kerning dist = -1)
    { 0x0398, -1 },  // (First char = [0x0398, Theta], Second char = [0x03A5, Upsilon], Kerning dist = -1)
    { 0x039B, -1 },  // (First char = [0x039B, Lambda], Second char = [0x03A5, Upsilon], Kerning dist = -1)
    { 0x039F, -1 },  // (First char = [0x039F, Omicron], Second char = [0x03A5, Upsilon], Kerning dist = -1)
    { 0x03A6, -1 },  // (First char = [0x03A6, Phi], Second char = [0x03A5, Upsilon], Kerning dist = -1)
    { 0x0386, -1 },  // (First char = [0x0386, Alphatonos], Second char = [0x03A6, Phi], Kerning dist = -1)
    { 0x038E, -1 },  // (First char = [0x038E, Upsilontonos], Second char = [0x03A6, Phi], Kerning dist = -1)
    { 0x0391, -1 },  // (First char = [0x0391, Alpha], Second char = [0x03A6, Phi], Kerning dist = -1)
    { 0x039A, -1 },  // (First char = [0x039A, Kappa], Second char = [0x03A6, Phi], Kerning dist = -1)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x03A6, Phi], Kerning dist = -1)
    { 0x03AB, -1 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x03A6, Phi], Kerning dist = -1)
    { 0x038E, -1 },  // (First char = [0x038E, Upsilontonos], Second char = [0x03A9, Omega], Kerning dist = -1)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x03A9, Omega], Kerning dist = -1)
    { 0x03AB, -1 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x03A9, Omega], Kerning dist = -1)
    { 0x0386, -1 },  // (First char = [0x0386, Alphatonos], Second char = [0x03AB, Upsilondieresis], Kerning dist = -1)
    { 0x0391, -1 },  // (First char = [0x0391, Alpha], Second char = [0x03AB, Upsilondieresis], Kerning dist = -1)
    { 0x0394, -1 },  // (First char = [0x0394, Delta], Second char = [0x03AB, Upsilondieresis], Kerning dist = -1)
    { 0x0398, -1 },  // (First char = [0x0398, Theta], Second char = [0x03AB, Upsilondieresis], Kerning dist = -1)
    { 0x039B, -1 },  // (First char = [0x039B, Lambda], Second char = [0x03AB, Upsilondieresis], Kerning dist = -1)
    { 0x039F, -1 },  // (First char = [0x039F, Omicron], Second char = [0x03AB, Upsilondieresis], Kerning dist = -1)
    { 0x03A6, -1 },  // (First char = [0x03A6, Phi], Second char = [0x03AB, Upsilondieresis], Kerning dist = -1)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x03AC, alphatonos], Kerning dist = -2)
    { 0x03A8, -1 },  // (First char = [0x03A8, Psi], Second char = [0x03AC, alphatonos], Kerning dist = -1)
    { 0x03B6, -1 },  // (First char = [0x03B6, zeta], Second char = [0x03AC, alphatonos], Kerning dist = -1)
    { 0x03BE, -1 },  // (First char = [0x03BE, xi], Second char = [0x03AC, alphatonos], Kerning dist = -1)
    { 0x03C7, -1 },  // (First char = [0x03C7, chi], Second char = [0x03AC, alphatonos], Kerning dist = -1)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x03AD, epsilontonos], Kerning dist = -2)
    { 0x038E, -1 },  // (First char = [0x038E, Upsilontonos], Second char = [0x03AE, etatonos], Kerning dist = -1)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x03AE, etatonos], Kerning dist = -1)
    { 0x03AB, -1 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x03AE, etatonos], Kerning dist = -1)
    { 0x038E, -1 },  // (First char = [0x038E, Upsilontonos], Second char = [0x03AF, iotatonos], Kerning dist = -1)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x03AF, iotatonos], Kerning dist = -1)
    { 0x03AB, -1 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x03AF, iotatonos], Kerning dist = -1)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x03B0, upsilondieresistonos], Kerning dist = -2)
    { 0x038E, -2 },  // (First char = [0x038E, Upsilontonos], Second char = [0x03B1, alpha], Kerning dist = -2)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x03B1, alpha], Kerning dist = -2)
    { 0x03A5, -2 },  // (First char = [0x03A5, Upsilon], Second char = [0x03B1, alpha], Kerning dist = -2)
    { 0x03A8, -1 },  // (First char = [0x03A8, Psi], Second char = [0x03B1, alpha], Kerning dist = -1)
    { 0x03AB, -2 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x03B1, alpha], Kerning dist = -2)
    { 0x03B6, -1 },  // (First char = [0x03B6, zeta], Second char = [0x03B1, alpha], Kerning dist = -1)
    { 0x03BE, -1 },  // (First char = [0x03BE, xi], Second char = [0x03B1, alpha], Kerning dist = -1)
    { 0x03C7, -1 },  // (First char = [0x03C7, chi], Second char = [0x03B1, alpha], Kerning dist = -1)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x03B3, gamma], Kerning dist = -2)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x03B3, gamma], Kerning dist = -1)
    { 0x03B6, -1 },  // (First char = [0x03B6, zeta], Second char = [0x03B3, gamma], Kerning dist = -1)
    { 0x03A8, -1 },  // (First char = [0x03A8, Psi], Second char = [0x03B4, delta], Kerning dist = -1)
    { 0x03B6, -1 },  // (First char = [0x03B6, zeta], Second char = [0x03B4, delta], Kerning dist = -1)
    { 0x03BE, -1 },  // (First char = [0x03BE, xi], Second char = [0x03B4, delta], Kerning dist = -1)
    { 0x03C7, -1 },  // (First char = [0x03C7, chi], Second char = [0x03B4, delta], Kerning dist = -1)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x03B5, epsilon], Kerning dist = -2)
    { 0x03BE, -1 },  // (First char = [0x03BE, xi], Second char = [0x03B6, zeta], Kerning dist = -1)
    { 0x03C7, -1 },  // (First char = [0x03C7, chi], Second char = [0x03B6, zeta], Kerning dist = -1)
    { 0x038E, -1 },  // (First char = [0x038E, Upsilontonos], Second char = [0x03B7, eta], Kerning dist = -1)
    { 0x03A4, -1 },  // (First char = [0x03A4, Tau], Second char = [0x03B7, eta], Kerning dist = -1)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x03B7, eta], Kerning dist = -1)
    { 0x03AB, -1 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x03B7, eta], Kerning dist = -1)
    { 0x03B6, -1 },  // (First char = [0x03B6, zeta], Second char = [0x03B8, theta], Kerning dist = -1)
    { 0x038E, -1 },  // (First char = [0x038E, Upsilontonos], Second char = [0x03B9, iota], Kerning dist = -1)
    { 0x0393, -1 },  // (First char = [0x0393, Gamma], Second char = [0x03B9, iota], Kerning dist = -1)
    { 0x03A4, -1 },  // (First char = [0x03A4, Tau], Second char = [0x03B9, iota], Kerning dist = -1)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x03B9, iota], Kerning dist = -1)
    { 0x03AB, -1 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x03B9, iota], Kerning dist = -1)
    { 0x038E, -1 },  // (First char = [0x038E, Upsilontonos], Second char = [0x03BA, kappa], Kerning dist = -1)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x03BA, kappa], Kerning dist = -1)
    { 0x03AB, -1 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x03BA, kappa], Kerning dist = -1)
    { 0x038E, -1 },  // (First char = [0x038E, Upsilontonos], Second char = [0x03BC, mu], Kerning dist = -1)
    { 0x03A4, -1 },  // (First char = [0x03A4, Tau], Second char = [0x03BC, mu], Kerning dist = -1)
    { 0x03A5, -1 },  // (First char = [0x03A5, Upsilon], Second char = [0x03BC, mu], Kerning dist = -1)
    { 0x03AB, -1 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x03BC, mu], Kerning dist = -1)
    { 0x03A4, -1 },  // (First char = [0x03A4, Tau], Second char = [0x03BD, nu], Kerning dist = -1)
    { 0x03B6, -1 },  // (First char = [0x03B6, zeta], Second char = [0x03BD, nu], Kerning dist = -1)
    { 0x03BE, -1 },  // (First char = [0x03BE, xi], Second char = [0x03BE, xi], Kerning dist = -1)
    { 0x038E, -2 },  // (First char = [0x038E, Upsilontonos], Second char = [0x03BF, omicron], Kerning dist = -2)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x03BF, omicron], Kerning dist = -2)
    { 0x03A5, -2 },  // (First char = [0x03A5, Upsilon], Second char = [0x03BF, omicron], Kerning dist = -2)
    { 0x03A8, -1 },  // (First char = [0x03A8, Psi], Second char = [0x03BF, omicron], Kerning dist = -1)
    { 0x03AB, -2 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x03BF, omicron], Kerning dist = -2)
    { 0x03B6, -1 },  // (First char = [0x03B6, zeta], Second char = [0x03BF, omicron], Kerning dist = -1)
    { 0x03BE, -1 },  // (First char = [0x03BE, xi], Second char = [0x03BF, omicron], Kerning dist = -1)
    { 0x03C7, -1 },  // (First char = [0x03C7, chi], Second char = [0x03BF, omicron], Kerning dist = -1)
    { 0x03A3, -1 },  // (First char = [0x03A3, Sigma], Second char = [0x03C0, pi], Kerning dist = -1)
    { 0x03B6, -1 },  // (First char = [0x03B6, zeta], Second char = [0x03C0, pi], Kerning dist = -1)
    { 0x03BE, -1 },  // (First char = [0x03BE, xi], Second char = [0x03C2, sigma1], Kerning dist = -1)
    { 0x03C7, -1 },  // (First char = [0x03C7, chi], Second char = [0x03C2, sigma1], Kerning dist = -1)
    { 0x038E, -2 },  // (First char = [0x038E, Upsilontonos], Second char = [0x03C3, sigma], Kerning dist = -2)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x03C3, sigma], Kerning dist = -2)
    { 0x03A5, -2 },  // (First char = [0x03A5, Upsilon], Second char = [0x03C3, sigma], Kerning dist = -2)
    { 0x03A8, -1 },  // (First char = [0x03A8, Psi], Second char = [0x03C3, sigma], Kerning dist = -1)
    { 0x03AB, -2 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x03C3, sigma], Kerning dist = -2)
    { 0x03B6, -1 },  // (First char = [0x03B6, zeta], Second char = [0x03C3, sigma], Kerning dist = -1)
    { 0x03BE, -1 },  // (First char = [0x03BE, xi], Second char = [0x03C3, sigma], Kerning dist = -1)
    { 0x03C7, -1 },  // (First char = [0x03C7, chi], Second char = [0x03C3, sigma], Kerning dist = -1)
    { 0x03A3, -1 },  // (First char = [0x03A3, Sigma], Second char = [0x03C4, tau], Kerning dist = -1)
    { 0x03B6, -1 },  // (First char = [0x03B6, zeta], Second char = [0x03C4, tau], Kerning dist = -1)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x03C5, upsilon], Kerning dist = -2)
    { 0x038E, -2 },  // (First char = [0x038E, Upsilontonos], Second char = [0x03C6, phi], Kerning dist = -2)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x03C6, phi], Kerning dist = -2)
    { 0x03A5, -2 },  // (First char = [0x03A5, Upsilon], Second char = [0x03C6, phi], Kerning dist = -2)
    { 0x03A8, -1 },  // (First char = [0x03A8, Psi], Second char = [0x03C6, phi], Kerning dist = -1)
    { 0x03AB, -2 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x03C6, phi], Kerning dist = -2)
    { 0x03B6, -1 },  // (First char = [0x03B6, zeta], Second char = [0x03C6, phi], Kerning dist = -1)
    { 0x03BE, -1 },  // (First char = [0x03BE, xi], Second char = [0x03C6, phi], Kerning dist = -1)
    { 0x03C7, -1 },  // (First char = [0x03C7, chi], Second char = [0x03C6, phi], Kerning dist = -1)
    { 0x03A4, -1 },  // (First char = [0x03A4, Tau], Second char = [0x03C7, chi], Kerning dist = -1)
    { 0x03B4, -1 },  // (First char = [0x03B4, delta], Second char = [0x03C7, chi], Kerning dist = -1)
    { 0x03BF, -1 },  // (First char = [0x03BF, omicron], Second char = [0x03C7, chi], Kerning dist = -1)
    { 0x03C6, -1 },  // (First char = [0x03C6, phi], Second char = [0x03C7, chi], Kerning dist = -1)
    { 0x03C9, -1 },  // (First char = [0x03C9, omega], Second char = [0x03C7, chi], Kerning dist = -1)
    { 0x03CC, -1 },  // (First char = [0x03CC, omicrontonos], Second char = [0x03C7, chi], Kerning dist = -1)
    { 0x03CE, -1 },  // (First char = [0x03CE, omegatonos], Second char = [0x03C7, chi], Kerning dist = -1)
    { 0x03A4, -1 },  // (First char = [0x03A4, Tau], Second char = [0x03C8, psi], Kerning dist = -1)
    { 0x03A8, -1 },  // (First char = [0x03A8, Psi], Second char = [0x03C9, omega], Kerning dist = -1)
    { 0x03B6, -1 },  // (First char = [0x03B6, zeta], Second char = [0x03C9, omega], Kerning dist = -1)
    { 0x03C7, -1 },  // (First char = [0x03C7, chi], Second char = [0x03C9, omega], Kerning dist = -1)
    { 0x038E,  1 },  // (First char = [0x038E, Upsilontonos], Second char = [0x03CA, iotadieresis], Kerning dist = 1)
    { 0x0393,  1 },  // (First char = [0x0393, Gamma], Second char = [0x03CA, iotadieresis], Kerning dist = 1)
    { 0x03A4,  2 },  // (First char = [0x03A4, Tau], Second char = [0x03CA, iotadieresis], Kerning dist = 2)
    { 0x03A5,  1 },  // (First char = [0x03A5, Upsilon], Second char = [0x03CA, iotadieresis], Kerning dist = 1)
    { 0x03AB,  1 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x03CA, iotadieresis], Kerning dist = 1)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x03CB, upsilondieresis], Kerning dist = -2)
    { 0x038E, -2 },  // (First char = [0x038E, Upsilontonos], Second char = [0x03CC, omicrontonos], Kerning dist = -2)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x03CC, omicrontonos], Kerning dist = -2)
    { 0x03A5, -2 },  // (First char = [0x03A5, Upsilon], Second char = [0x03CC, omicrontonos], Kerning dist = -2)
    { 0x03A8, -1 },  // (First char = [0x03A8, Psi], Second char = [0x03CC, omicrontonos], Kerning dist = -1)
    { 0x03AB, -2 },  // (First char = [0x03AB, Upsilondieresis], Second char = [0x03CC, omicrontonos], Kerning dist = -2)
    { 0x03B6, -1 },  // (First char = [0x03B6, zeta], Second char = [0x03CC, omicrontonos], Kerning dist = -1)
    { 0x03BE, -1 },  // (First char = [0x03BE, xi], Second char = [0x03CC, omicrontonos], Kerning dist = -1)
    { 0x03C7, -1 },  // (First char = [0x03C7, chi], Second char = [0x03CC, omicrontonos], Kerning dist = -1)
    { 0x03A4, -2 },  // (First char = [0x03A4, Tau], Second char = [0x03CD, upsilontonos], Kerning dist = -2)
    { 0x03A8, -1 },  // (First char = [0x03A8, Psi], Second char = [0x03CE, omegatonos], Kerning dist = -1)
    { 0x03B6, -1 },  // (First char = [0x03B6, zeta], Second char = [0x03CE, omegatonos], Kerning dist = -1)
    { 0x03C7, -1 },  // (First char = [0x03C7, chi], Second char = [0x03CE, omegatonos], Kerning dist = -1)
    { 0x0412, -1 },  // (First char = [0x0412, uni0412], Second char = [0x0410, uni0410], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x0410, uni0410], Kerning dist = -1)
    { 0x0420, -1 },  // (First char = [0x0420, uni0420], Second char = [0x0410, uni0410], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x0410, uni0410], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0410, uni0410], Kerning dist = -1)
    { 0x042E, -1 },  // (First char = [0x042E, uni042E], Second char = [0x0410, uni0410], Kerning dist = -1)
    { 0x0410,  1 },  // (First char = [0x0410, uni0410], Second char = [0x0414, uni0414], Kerning dist = 1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x0414, uni0414], Kerning dist = -1)
    { 0x0420, -1 },  // (First char = [0x0420, uni0420], Second char = [0x0414, uni0414], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x0414, uni0414], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0414, uni0414], Kerning dist = -1)
    { 0x0424, -1 },  // (First char = [0x0424, uni0424], Second char = [0x0414, uni0414], Kerning dist = -1)
    { 0x042D, -1 },  // (First char = [0x042D, uni042D], Second char = [0x0414, uni0414], Kerning dist = -1)
    { 0x042E, -1 },  // (First char = [0x042E, uni042E], Second char = [0x0414, uni0414], Kerning dist = -1)
    { 0x042C, -1 },  // (First char = [0x042C, uni042C], Second char = [0x0416, uni0416], Kerning dist = -1)
    { 0x0412, -1 },  // (First char = [0x0412, uni0412], Second char = [0x0417, uni0417], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x041B, uni041B], Kerning dist = -1)
    { 0x0420, -1 },  // (First char = [0x0420, uni0420], Second char = [0x041B, uni041B], Kerning dist = -1)
    { 0x0421, -1 },  // (First char = [0x0421, uni0421], Second char = [0x041B, uni041B], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x041B, uni041B], Kerning dist = -1)
    { 0x0424, -1 },  // (First char = [0x0424, uni0424], Second char = [0x041B, uni041B], Kerning dist = -1)
    { 0x042C, -1 },  // (First char = [0x042C, uni042C], Second char = [0x041B, uni041B], Kerning dist = -1)
    { 0x042D, -1 },  // (First char = [0x042D, uni042D], Second char = [0x041B, uni041B], Kerning dist = -1)
    { 0x042E, -1 },  // (First char = [0x042E, uni042E], Second char = [0x041B, uni041B], Kerning dist = -1)
    { 0x0412, -1 },  // (First char = [0x0412, uni0412], Second char = [0x041E, uni041E], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x041E, uni041E], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x041E, uni041E], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x041E, uni041E], Kerning dist = -1)
    { 0x0425, -1 },  // (First char = [0x0425, uni0425], Second char = [0x041E, uni041E], Kerning dist = -1)
    { 0x0412, -1 },  // (First char = [0x0412, uni0412], Second char = [0x0421, uni0421], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x0421, uni0421], Kerning dist = -1)
    { 0x0425, -1 },  // (First char = [0x0425, uni0425], Second char = [0x0421, uni0421], Kerning dist = -1)
    { 0x0410, -2 },  // (First char = [0x0410, uni0410], Second char = [0x0422, uni0422], Kerning dist = -2)
    { 0x0411, -1 },  // (First char = [0x0411, uni0411], Second char = [0x0422, uni0422], Kerning dist = -1)
    { 0x0412, -1 },  // (First char = [0x0412, uni0412], Second char = [0x0422, uni0422], Kerning dist = -1)
    { 0x0420, -1 },  // (First char = [0x0420, uni0420], Second char = [0x0422, uni0422], Kerning dist = -1)
    { 0x0421, -1 },  // (First char = [0x0421, uni0421], Second char = [0x0422, uni0422], Kerning dist = -1)
    { 0x0424, -1 },  // (First char = [0x0424, uni0424], Second char = [0x0422, uni0422], Kerning dist = -1)
    { 0x042C, -2 },  // (First char = [0x042C, uni042C], Second char = [0x0422, uni0422], Kerning dist = -2)
    { 0x042E, -1 },  // (First char = [0x042E, uni042E], Second char = [0x0422, uni0422], Kerning dist = -1)
    { 0x0410, -1 },  // (First char = [0x0410, uni0410], Second char = [0x0423, uni0423], Kerning dist = -1)
    { 0x0412, -1 },  // (First char = [0x0412, uni0412], Second char = [0x0423, uni0423], Kerning dist = -1)
    { 0x0421, -1 },  // (First char = [0x0421, uni0421], Second char = [0x0423, uni0423], Kerning dist = -1)
    { 0x0424, -1 },  // (First char = [0x0424, uni0424], Second char = [0x0423, uni0423], Kerning dist = -1)
    { 0x0410, -1 },  // (First char = [0x0410, uni0410], Second char = [0x0424, uni0424], Kerning dist = -1)
    { 0x0412, -1 },  // (First char = [0x0412, uni0412], Second char = [0x0424, uni0424], Kerning dist = -1)
    { 0x041A, -1 },  // (First char = [0x041A, uni041A], Second char = [0x0424, uni0424], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x0424, uni0424], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0424, uni0424], Kerning dist = -1)
    { 0x0425, -1 },  // (First char = [0x0425, uni0425], Second char = [0x0424, uni0424], Kerning dist = -1)
    { 0x0412, -1 },  // (First char = [0x0412, uni0412], Second char = [0x0425, uni0425], Kerning dist = -1)
    { 0x041E, -1 },  // (First char = [0x041E, uni041E], Second char = [0x0425, uni0425], Kerning dist = -1)
    { 0x0420, -1 },  // (First char = [0x0420, uni0420], Second char = [0x0425, uni0425], Kerning dist = -1)
    { 0x0421, -1 },  // (First char = [0x0421, uni0421], Second char = [0x0425, uni0425], Kerning dist = -1)
    { 0x042C, -1 },  // (First char = [0x042C, uni042C], Second char = [0x0425, uni0425], Kerning dist = -1)
    { 0x042D, -1 },  // (First char = [0x042D, uni042D], Second char = [0x0425, uni0425], Kerning dist = -1)
    { 0x042E, -1 },  // (First char = [0x042E, uni042E], Second char = [0x0425, uni0425], Kerning dist = -1)
    { 0x0410, -2 },  // (First char = [0x0410, uni0410], Second char = [0x0427, uni0427], Kerning dist = -2)
    { 0x0411, -1 },  // (First char = [0x0411, uni0411], Second char = [0x0427, uni0427], Kerning dist = -1)
    { 0x0412, -1 },  // (First char = [0x0412, uni0412], Second char = [0x0427, uni0427], Kerning dist = -1)
    { 0x0414, -1 },  // (First char = [0x0414, uni0414], Second char = [0x0427, uni0427], Kerning dist = -1)
    { 0x0421, -1 },  // (First char = [0x0421, uni0421], Second char = [0x0427, uni0427], Kerning dist = -1)
    { 0x042C, -2 },  // (First char = [0x042C, uni042C], Second char = [0x0427, uni0427], Kerning dist = -2)
    { 0x042E, -1 },  // (First char = [0x042E, uni042E], Second char = [0x0427, uni0427], Kerning dist = -1)
    { 0x0411, -1 },  // (First char = [0x0411, uni0411], Second char = [0x042A, uni042A], Kerning dist = -1)
    { 0x0412, -1 },  // (First char = [0x0412, uni0412], Second char = [0x042A, uni042A], Kerning dist = -1)
    { 0x0421, -1 },  // (First char = [0x0421, uni0421], Second char = [0x042A, uni042A], Kerning dist = -1)
    { 0x0425, -1 },  // (First char = [0x0425, uni0425], Second char = [0x042D, uni042D], Kerning dist = -1)
    { 0x0412, -1 },  // (First char = [0x0412, uni0412], Second char = [0x042F, uni042F], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x042F, uni042F], Kerning dist = -1)
    { 0x0424, -1 },  // (First char = [0x0424, uni0424], Second char = [0x042F, uni042F], Kerning dist = -1)
    { 0x042A, -1 },  // (First char = [0x042A, uni042A], Second char = [0x042F, uni042F], Kerning dist = -1)
    { 0x042C, -1 },  // (First char = [0x042C, uni042C], Second char = [0x042F, uni042F], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x0430, uni0430], Kerning dist = -1)
    { 0x0420, -1 },  // (First char = [0x0420, uni0420], Second char = [0x0430, uni0430], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x0430, uni0430], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x0432, uni0432], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x0432, uni0432], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0432, uni0432], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0433, uni0433], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x0434, uni0434], Kerning dist = -1)
    { 0x0420, -2 },  // (First char = [0x0420, uni0420], Second char = [0x0434, uni0434], Kerning dist = -2)
    { 0x0423, -2 },  // (First char = [0x0423, uni0423], Second char = [0x0434, uni0434], Kerning dist = -2)
    { 0x042D, -1 },  // (First char = [0x042D, uni042D], Second char = [0x0434, uni0434], Kerning dist = -1)
    { 0x042E, -1 },  // (First char = [0x042E, uni042E], Second char = [0x0434, uni0434], Kerning dist = -1)
    { 0x0431, -1 },  // (First char = [0x0431, uni0431], Second char = [0x0434, uni0434], Kerning dist = -1)
    { 0x0433, -1 },  // (First char = [0x0433, uni0433], Second char = [0x0434, uni0434], Kerning dist = -1)
    { 0x0442, -1 },  // (First char = [0x0442, uni0442], Second char = [0x0434, uni0434], Kerning dist = -1)
    { 0x0443, -1 },  // (First char = [0x0443, uni0443], Second char = [0x0434, uni0434], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x0435, uni0435], Kerning dist = -1)
    { 0x0420, -1 },  // (First char = [0x0420, uni0420], Second char = [0x0435, uni0435], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x0435, uni0435], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0435, uni0435], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0436, uni0436], Kerning dist = -1)
    { 0x0442,  1 },  // (First char = [0x0442, uni0442], Second char = [0x0436, uni0436], Kerning dist = 1)
    { 0x0414,  1 },  // (First char = [0x0414, uni0414], Second char = [0x0437, uni0437], Kerning dist = 1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0437, uni0437], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x0438, uni0438], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x0438, uni0438], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0438, uni0438], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0439, uni0439], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x043A, uni043A], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x043A, uni043A], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x043B, uni043B], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x043B, uni043B], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x043B, uni043B], Kerning dist = -1)
    { 0x0424, -1 },  // (First char = [0x0424, uni0424], Second char = [0x043B, uni043B], Kerning dist = -1)
    { 0x042D, -1 },  // (First char = [0x042D, uni042D], Second char = [0x043B, uni043B], Kerning dist = -1)
    { 0x042E, -1 },  // (First char = [0x042E, uni042E], Second char = [0x043B, uni043B], Kerning dist = -1)
    { 0x0431, -1 },  // (First char = [0x0431, uni0431], Second char = [0x043B, uni043B], Kerning dist = -1)
    { 0x0435, -1 },  // (First char = [0x0435, uni0435], Second char = [0x043B, uni043B], Kerning dist = -1)
    { 0x0440, -1 },  // (First char = [0x0440, uni0440], Second char = [0x043B, uni043B], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x043C, uni043C], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x043C, uni043C], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x043C, uni043C], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x043D, uni043D], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x043D, uni043D], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x043E, uni043E], Kerning dist = -1)
    { 0x0420, -1 },  // (First char = [0x0420, uni0420], Second char = [0x043E, uni043E], Kerning dist = -1)
    { 0x0422, -2 },  // (First char = [0x0422, uni0422], Second char = [0x043E, uni043E], Kerning dist = -2)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x043E, uni043E], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x043F, uni043F], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x043F, uni043F], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x0440, uni0440], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x0440, uni0440], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0440, uni0440], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x0441, uni0441], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0441, uni0441], Kerning dist = -1)
    { 0x0412, -1 },  // (First char = [0x0412, uni0412], Second char = [0x0442, uni0442], Kerning dist = -1)
    { 0x0435, -1 },  // (First char = [0x0435, uni0435], Second char = [0x0442, uni0442], Kerning dist = -1)
    { 0x044C, -2 },  // (First char = [0x044C, uni044C], Second char = [0x0442, uni0442], Kerning dist = -2)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x0443, uni0443], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x0443, uni0443], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x0445, uni0445], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0445, uni0445], Kerning dist = -1)
    { 0x0431, -1 },  // (First char = [0x0431, uni0431], Second char = [0x0445, uni0445], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0446, uni0446], Kerning dist = -1)
    { 0x0412, -1 },  // (First char = [0x0412, uni0412], Second char = [0x0447, uni0447], Kerning dist = -1)
    { 0x0431, -1 },  // (First char = [0x0431, uni0431], Second char = [0x0447, uni0447], Kerning dist = -1)
    { 0x0432, -1 },  // (First char = [0x0432, uni0432], Second char = [0x0447, uni0447], Kerning dist = -1)
    { 0x0435, -1 },  // (First char = [0x0435, uni0435], Second char = [0x0447, uni0447], Kerning dist = -1)
    { 0x0437, -1 },  // (First char = [0x0437, uni0437], Second char = [0x0447, uni0447], Kerning dist = -1)
    { 0x044C, -1 },  // (First char = [0x044C, uni044C], Second char = [0x0447, uni0447], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0448, uni0448], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x0449, uni0449], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x0449, uni0449], Kerning dist = -1)
    { 0x0431, -1 },  // (First char = [0x0431, uni0431], Second char = [0x044A, uni044A], Kerning dist = -1)
    { 0x0432, -1 },  // (First char = [0x0432, uni0432], Second char = [0x044A, uni044A], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x044B, uni044B], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x044B, uni044B], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x044C, uni044C], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x044C, uni044C], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x044E, uni044E], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x044E, uni044E], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x044E, uni044E], Kerning dist = -1)
    { 0x0413, -1 },  // (First char = [0x0413, uni0413], Second char = [0x044F, uni044F], Kerning dist = -1)
    { 0x0420, -1 },  // (First char = [0x0420, uni0420], Second char = [0x044F, uni044F], Kerning dist = -1)
    { 0x0422, -1 },  // (First char = [0x0422, uni0422], Second char = [0x044F, uni044F], Kerning dist = -1)
    { 0x0423, -1 },  // (First char = [0x0423, uni0423], Second char = [0x044F, uni044F], Kerning dist = -1)
};
