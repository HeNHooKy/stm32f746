/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/Texts.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/TypedText.hpp>
#include <texts/TypedTextDatabase.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <touchgfx/TextProvider.hpp>

touchgfx::Font::StringWidthFunctionPointer touchgfx::Font::getStringWidthFunction = &touchgfx::Font::getStringWidthLTR;
touchgfx::LCD::DrawStringFunctionPointer touchgfx::LCD::drawStringFunction = &touchgfx::LCD::drawStringLTR;
touchgfx::TextProvider::UnicodeConverterInitFunctionPointer touchgfx::TextProvider::unicodeConverterInitFunction = static_cast<touchgfx::TextProvider::UnicodeConverterInitFunctionPointer>(0);
touchgfx::TextProvider::UnicodeConverterFunctionPointer touchgfx::TextProvider::unicodeConverterFunction = static_cast<touchgfx::TextProvider::UnicodeConverterFunctionPointer>(0);

//Default typed text database
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE =
{
    0x41f, 0x43e, 0x434, 0x43e, 0x433, 0x440, 0x435, 0x432, 0x20, 0x434, 0x43b, 0x438, 0x442, 0x441, 0x44f, 0x20, 0x31, 0x35, 0x20, 0x43c, 0x438, 0x43d, 0x443, 0x442, 0xa, 0x43d, 0x430, 0x20, 0x43c, 0x430, 0x43a, 0x441, 0x438, 0x43c, 0x430, 0x43b, 0x44c, 0x43d, 0x43e, 0x20, 0xa, 0x432, 0x43e, 0x437, 0x43c, 0x43e, 0x436, 0x43d, 0x43e, 0x439, 0x20, 0x442, 0x435, 0x43c, 0x43f, 0x435, 0x440, 0x430, 0x442, 0x443, 0x440, 0x435, 0x0, // @0 "???????? ?????? 15 ???????? ??????????? ?????????? ???????????"
    0x421, 0x443, 0x448, 0x43a, 0x430, 0x20, 0x434, 0x43b, 0x438, 0x442, 0x441, 0x44f, 0x20, 0x38, 0x20, 0x447, 0x430, 0x441, 0x43e, 0x432, 0xa, 0x43d, 0x430, 0x20, 0x43c, 0x430, 0x43a, 0x441, 0x438, 0x43c, 0x430, 0x43b, 0x44c, 0x43d, 0x43e, 0x20, 0xa, 0x432, 0x43e, 0x437, 0x43c, 0x43e, 0x436, 0x43d, 0x43e, 0x439, 0x20, 0x442, 0x435, 0x43c, 0x43f, 0x435, 0x440, 0x430, 0x442, 0x443, 0x440, 0x435, 0x0, // @63 "????? ?????? 8 ???????? ??????????? ?????????? ???????????"
    0x41e, 0x442, 0x434, 0x435, 0x43b, 0x435, 0x43d, 0x438, 0x435, 0x20, 0x434, 0x43b, 0x44f, 0x20, 0x43e, 0x434, 0x435, 0x436, 0x434, 0x44b, 0x0, // @122 "????????? ??? ??????"
    0x41e, 0x442, 0x434, 0x435, 0x43b, 0x435, 0x43d, 0x438, 0x435, 0x20, 0x434, 0x43b, 0x44f, 0x20, 0x43e, 0x431, 0x443, 0x432, 0x438, 0x0, // @143 "????????? ??? ?????"
    0x421, 0x442, 0x430, 0x43d, 0x434, 0x430, 0x440, 0x442, 0x43d, 0x430, 0x44f, 0x20, 0x441, 0x443, 0x448, 0x43a, 0x430, 0x0, // @163 "??????????? ?????"
    0x41f, 0x43e, 0x434, 0x43e, 0x433, 0x440, 0x435, 0x432, 0x20, 0x43e, 0x434, 0x435, 0x436, 0x434, 0x44b, 0x0, // @181 "???????? ??????"
    0x420, 0x443, 0x447, 0x43d, 0x430, 0x44f, 0x20, 0x441, 0x443, 0x448, 0x43a, 0x430, 0x0, // @197 "?????? ?????"
    0x442, 0x435, 0x43c, 0x43f, 0x435, 0x440, 0x430, 0x442, 0x443, 0x440, 0x430, 0x0, // @210 "???????????"
    0x4e, 0x65, 0x77, 0x20, 0x54, 0x65, 0x78, 0x74, 0x0, // @222 "New Text"
    0x437, 0x430, 0x43a, 0x440, 0x44b, 0x442, 0x44c, 0x0, // @231 "???????"
    0x43c, 0x438, 0x43d, 0x443, 0x442, 0x44b, 0x0, // @239 "??????"
    0x447, 0x430, 0x441, 0x44b, 0x0, // @246 "????"
    0x2, 0x0, // @251 "<>"
    0x33, 0x30, 0x0, // @253 "30"
    0x35, 0x30, 0x0 // @256 "50"
};
extern uint32_t const indicesGb[];

//array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

//Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] =
{
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}

