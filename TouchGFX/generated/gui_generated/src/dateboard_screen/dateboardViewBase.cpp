/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/dateboard_screen/dateboardViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

dateboardViewBase::dateboardViewBase() :
    buttonCallback(this, &dateboardViewBase::buttonCallbackHandler),
    radioButtonSelectedCallback(this, &dateboardViewBase::radioButtonSelectedCallbackHandler)
{

    fon.setXY(0, 0);
    fon.setBitmap(touchgfx::Bitmap(BITMAP_FON_ID));

    Container.setPosition(22, 79, 442, 100);
    Container.setScrollbarsColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    list.setDirection(touchgfx::EAST);
    list.setPosition(1, -66, 250, 250);
    Container.add(list);
    Container.setScrollbarsPermanentlyVisible();

    logo.setXY(97, 4);
    logo.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    logo.setLinespacing(0);
    logo.setTypedText(touchgfx::TypedText(T_SINGLEUSEID49));

    startbt.setXY(28, 225);
    startbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS2_ID));
    startbt.setLabelText(touchgfx::TypedText(T_SINGLEUSEID50));
    startbt.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    startbt.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));

    closebt.setXY(305, 228);
    closebt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ID));
    closebt.setLabelText(touchgfx::TypedText(T_SINGLEUSEID51));
    closebt.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    closebt.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    closebt.setAction(buttonCallback);

    minusbt.setXY(244, 191);
    minusbt.setBitmaps(touchgfx::Bitmap(BITMAP_CLIC2_ID), touchgfx::Bitmap(BITMAP_CLIC1_ID));
    minusbt.setLabelText(touchgfx::TypedText(T_SINGLEUSEID62));
    minusbt.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    minusbt.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    minusbt.setAction(buttonCallback);

    plusbt.setXY(22, 191);
    plusbt.setBitmaps(touchgfx::Bitmap(BITMAP_CLIC2_ID), touchgfx::Bitmap(BITMAP_CLIC1_ID));
    plusbt.setLabelText(touchgfx::TypedText(T_SINGLEUSEID59));
    plusbt.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    plusbt.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    plusbt.setAction(buttonCallback);

    pnbt.setXY(19, 32);
    pnbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK__ID));
    pnbt.setSelected(true);
    pnbt.setDeselectionEnabled(false);

    vtbt.setXY(82, 32);
    vtbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK__ID));
    vtbt.setSelected(false);
    vtbt.setDeselectionEnabled(false);

    srbt.setXY(148, 32);
    srbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK__ID));
    srbt.setSelected(false);
    srbt.setDeselectionEnabled(false);

    chtbt.setXY(210, 32);
    chtbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ROUND_ID));
    chtbt.setSelected(false);
    chtbt.setDeselectionEnabled(false);

    ptbt.setXY(276, 32);
    ptbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK__ID));
    ptbt.setSelected(false);
    ptbt.setDeselectionEnabled(false);

    sbbt.setXY(339, 32);
    sbbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK__ID));
    sbbt.setSelected(false);
    sbbt.setDeselectionEnabled(false);

    vsbt.setXY(404, 32);
    vsbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK__ID));
    vsbt.setSelected(false);
    vsbt.setDeselectionEnabled(false);

    pntxt1.setXY(49, 42);
    pntxt1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    pntxt1.setLinespacing(0);
    pntxt1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID144));

    vttxt1.setXY(112, 42);
    vttxt1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    vttxt1.setLinespacing(0);
    vttxt1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID145));

    srtxt1.setXY(178, 42);
    srtxt1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    srtxt1.setLinespacing(0);
    srtxt1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID146));

    chttxt1.setXY(242, 42);
    chttxt1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    chttxt1.setLinespacing(0);
    chttxt1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID147));

    pttxt1.setXY(306, 42);
    pttxt1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    pttxt1.setLinespacing(0);
    pttxt1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID148));

    sbtxt1.setXY(372, 42);
    sbtxt1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    sbtxt1.setLinespacing(0);
    sbtxt1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID149));

    vstxt1.setXY(436, 42);
    vstxt1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    vstxt1.setLinespacing(0);
    vstxt1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID150));

    clearbox1.setXY(0, 0);
    clearbox1.setVisible(false);

    addevent1.setXY(0, 0);
    addevent1.setVisible(false);

    msgBox1.setXY(28, 61);
    msgBox1.setVisible(false);

    add(fon);
    add(Container);
    add(logo);
    add(startbt);
    add(closebt);
    add(minusbt);
    add(plusbt);
    add(pnbt);
    add(vtbt);
    add(srbt);
    add(chtbt);
    add(ptbt);
    add(sbbt);
    add(vsbt);
    add(pntxt1);
    add(vttxt1);
    add(srtxt1);
    add(chttxt1);
    add(pttxt1);
    add(sbtxt1);
    add(vstxt1);
    add(clearbox1);
    add(addevent1);
    add(msgBox1);
    day.add(pnbt);
    day.add(vtbt);
    day.add(srbt);
    day.add(chtbt);
    day.add(ptbt);
    day.add(sbbt);
    day.add(vsbt);
    day.setRadioButtonSelectedHandler(radioButtonSelectedCallback);
}

void dateboardViewBase::setupScreen()
{
    clearbox1.initialize();
    addevent1.initialize();
    msgBox1.initialize();
}

void dateboardViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &closebt)
    {
        //close
        //When closebt clicked change screen to mainboard
        //Go to mainboard with no screen transition
        application().gotomainboardScreenNoTransition();
    }
    else if (&src == &minusbt)
    {
        //clear
        //When minusbt clicked call virtual function
        //Call CallClearWindow
        CallClearWindow();
    }
    else if (&src == &plusbt)
    {
        //PlusWidget
        //When plusbt clicked call virtual function
        //Call CallAddEvent
        CallAddEvent();
    }
}

void dateboardViewBase::radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &pnbt)
    {
        //SetMonday
        //When pnbt selected call virtual function
        //Call SetMonD
        SetMonD();
    }
    else if (&src == &vtbt)
    {
        //SetTwoD
        //When vtbt selected call virtual function
        //Call SetTwoD
        SetTwoD();
    }
    else if (&src == &srbt)
    {
        //SetWedD
        //When srbt selected call virtual function
        //Call SetWedD
        SetWedD();
    }
    else if (&src == &chtbt)
    {
        //SetThuD
        //When chtbt selected call virtual function
        //Call SetThuD
        SetThuD();
    }
    else if (&src == &ptbt)
    {
        //SetFriD
        //When ptbt selected call virtual function
        //Call SetFriD
        SetFriD();
    }
    else if (&src == &sbbt)
    {
        //SetSatD
        //When sbbt selected call virtual function
        //Call SetSatD
        SetSatD();
    }
    else if (&src == &vsbt)
    {
        //SetSunD
        //When vsbt selected call virtual function
        //Call SetSunD
        SetSunD();
    }
}
