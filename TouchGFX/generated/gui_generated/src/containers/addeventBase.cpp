/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/containers/addeventBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

addeventBase::addeventBase() :
    buttonCallback(this, &addeventBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &addeventBase::sliderValueChangedCallbackHandler)
{
    setWidth(480);
    setHeight(272);
    addevent.setBackground(touchgfx::BitmapId(BITMAP_FON_ID), 0, 0);
    addevent.setShadeColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    addevent.setShadeAlpha(150);

    closebt2.setXY(313, 230);
    closebt2.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_PRESED_ID));
    closebt2.setLabelText(touchgfx::TypedText(T_SINGLEUSEID220));
    closebt2.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    closebt2.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    closebt2.setAction(buttonCallback);
    addevent.add(closebt2);

    hoursDownLeftbt.setXY(22, 94);
    hoursDownLeftbt.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_PASSED_ID));
    hoursDownLeftbt.setDelay(60);
    hoursDownLeftbt.setInterval(6);
    hoursDownLeftbt.setAction(buttonCallback);
    addevent.add(hoursDownLeftbt);

    hoursUpLeftbt.setXY(91, 94);
    hoursUpLeftbt.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_PASSED_ID));
    hoursUpLeftbt.setDelay(60);
    hoursUpLeftbt.setInterval(6);
    hoursUpLeftbt.setAction(buttonCallback);
    addevent.add(hoursUpLeftbt);

    timerHoursLeft.setXY(50, 96);
    timerHoursLeft.setColor(touchgfx::Color::getColorFrom24BitRGB(8, 0, 0));
    timerHoursLeft.setLinespacing(0);
    Unicode::snprintf(timerHoursLeftBuffer, TIMERHOURSLEFT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID221).getText());
    timerHoursLeft.setWildcard(timerHoursLeftBuffer);
    timerHoursLeft.resizeToCurrentText();
    timerHoursLeft.setTypedText(touchgfx::TypedText(T_TEXTID2));
    addevent.add(timerHoursLeft);

    hour11.setXY(52, 80);
    hour11.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    hour11.setLinespacing(0);
    hour11.setTypedText(touchgfx::TypedText(T_SINGLEUSEID222));
    addevent.add(hour11);

    savebt.setXY(16, 230);
    savebt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_PRESED_ID));
    savebt.setLabelText(touchgfx::TypedText(T_SINGLEUSEID223));
    savebt.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    savebt.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    savebt.setAction(buttonCallback);
    addevent.add(savebt);

    minute1.setXY(157, 80);
    minute1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    minute1.setLinespacing(0);
    minute1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID224));
    addevent.add(minute1);

    minutesDownLeftbt.setXY(136, 94);
    minutesDownLeftbt.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_PASSED_ID));
    minutesDownLeftbt.setDelay(60);
    minutesDownLeftbt.setInterval(6);
    minutesDownLeftbt.setAction(buttonCallback);
    addevent.add(minutesDownLeftbt);

    timerMinutesLeft.setXY(164, 96);
    timerMinutesLeft.setColor(touchgfx::Color::getColorFrom24BitRGB(10, 0, 0));
    timerMinutesLeft.setLinespacing(0);
    Unicode::snprintf(timerMinutesLeftBuffer, TIMERMINUTESLEFT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID225).getText());
    timerMinutesLeft.setWildcard(timerMinutesLeftBuffer);
    timerMinutesLeft.resizeToCurrentText();
    timerMinutesLeft.setTypedText(touchgfx::TypedText(T_TEXTID2));
    addevent.add(timerMinutesLeft);

    minutesUpLeftbt.setXY(205, 94);
    minutesUpLeftbt.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_PASSED_ID));
    minutesUpLeftbt.setDelay(60);
    minutesUpLeftbt.setInterval(6);
    minutesUpLeftbt.setAction(buttonCallback);
    addevent.add(minutesUpLeftbt);

    timestarttext.setXY(41, 52);
    timestarttext.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    timestarttext.setLinespacing(0);
    timestarttext.setTypedText(touchgfx::TypedText(T_SINGLEUSEID226));
    addevent.add(timestarttext);

    downClockTopbt.setXY(292, 89);
    downClockTopbt.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_PASSED_ID));
    downClockTopbt.setDelay(60);
    downClockTopbt.setInterval(6);
    downClockTopbt.setAction(buttonCallback);
    addevent.add(downClockTopbt);

    upClockTopbt.setXY(361, 89);
    upClockTopbt.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_PASSED_ID));
    upClockTopbt.setDelay(60);
    upClockTopbt.setInterval(6);
    upClockTopbt.setAction(buttonCallback);
    addevent.add(upClockTopbt);

    timerHoursTop.setXY(320, 92);
    timerHoursTop.setColor(touchgfx::Color::getColorFrom24BitRGB(8, 0, 0));
    timerHoursTop.setLinespacing(0);
    Unicode::snprintf(timerHoursTopBuffer, TIMERHOURSTOP_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID227).getText());
    timerHoursTop.setWildcard(timerHoursTopBuffer);
    timerHoursTop.resizeToCurrentText();
    timerHoursTop.setTypedText(touchgfx::TypedText(T_TEXTID2));
    addevent.add(timerHoursTop);

    hour2.setXY(398, 100);
    hour2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    hour2.setLinespacing(0);
    hour2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID228));
    addevent.add(hour2);

    timeclock1.setXY(278, 46);
    timeclock1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    timeclock1.setLinespacing(0);
    timeclock1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID229));
    addevent.add(timeclock1);

    downClockBottombt.setXY(288, 176);
    downClockBottombt.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_PASSED_ID));
    downClockBottombt.setDelay(60);
    downClockBottombt.setInterval(6);
    downClockBottombt.setAction(buttonCallback);
    addevent.add(downClockBottombt);

    upClockBottombt.setXY(357, 176);
    upClockBottombt.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_PASSED_ID));
    upClockBottombt.setDelay(60);
    upClockBottombt.setInterval(6);
    upClockBottombt.setAction(buttonCallback);
    addevent.add(upClockBottombt);

    timerHoursBottom.setXY(316, 179);
    timerHoursBottom.setColor(touchgfx::Color::getColorFrom24BitRGB(8, 0, 0));
    timerHoursBottom.setLinespacing(0);
    Unicode::snprintf(timerHoursBottomBuffer, TIMERHOURSBOTTOM_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID230).getText());
    timerHoursBottom.setWildcard(timerHoursBottomBuffer);
    timerHoursBottom.resizeToCurrentText();
    timerHoursBottom.setTypedText(touchgfx::TypedText(T_TEXTID2));
    addevent.add(timerHoursBottom);

    hour1.setXY(393, 186);
    hour1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    hour1.setLinespacing(0);
    hour1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID231));
    addevent.add(hour1);

    timeclock2.setXY(278, 136);
    timeclock2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    timeclock2.setLinespacing(0);
    timeclock2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID232));
    addevent.add(timeclock2);

    pnbt.setXY(9, 7);
    pnbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK__ID));
    pnbt.setSelected(true);
    pnbt.setDeselectionEnabled(false);
    addevent.add(pnbt);

    vtbt.setXY(72, 7);
    vtbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK__ID));
    vtbt.setSelected(false);
    vtbt.setDeselectionEnabled(false);
    addevent.add(vtbt);

    srbt.setXY(138, 7);
    srbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK__ID));
    srbt.setSelected(false);
    srbt.setDeselectionEnabled(false);
    addevent.add(srbt);

    chtbt.setXY(201, 7);
    chtbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ROUND_ID));
    chtbt.setSelected(false);
    chtbt.setDeselectionEnabled(false);
    addevent.add(chtbt);

    ptbt.setXY(266, 7);
    ptbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK__ID));
    ptbt.setSelected(false);
    ptbt.setDeselectionEnabled(false);
    addevent.add(ptbt);

    sbbt.setXY(330, 7);
    sbbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK__ID));
    sbbt.setSelected(false);
    sbbt.setDeselectionEnabled(false);
    addevent.add(sbbt);

    vsbt.setXY(394, 7);
    vsbt.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ROUND_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK_ID), touchgfx::Bitmap(BITMAP_BLUE_CHECK_BUTTONS_CHECK__ID));
    vsbt.setSelected(false);
    vsbt.setDeselectionEnabled(false);
    addevent.add(vsbt);

    pntxt.setXY(40, 17);
    pntxt.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    pntxt.setLinespacing(0);
    pntxt.setTypedText(touchgfx::TypedText(T_SINGLEUSEID233));
    addevent.add(pntxt);

    vttxt.setXY(103, 17);
    vttxt.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    vttxt.setLinespacing(0);
    vttxt.setTypedText(touchgfx::TypedText(T_SINGLEUSEID234));
    addevent.add(vttxt);

    srtxt.setXY(169, 17);
    srtxt.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    srtxt.setLinespacing(0);
    srtxt.setTypedText(touchgfx::TypedText(T_SINGLEUSEID235));
    addevent.add(srtxt);

    chttxt.setXY(233, 17);
    chttxt.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    chttxt.setLinespacing(0);
    chttxt.setTypedText(touchgfx::TypedText(T_SINGLEUSEID236));
    addevent.add(chttxt);

    pttxt.setXY(297, 17);
    pttxt.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    pttxt.setLinespacing(0);
    pttxt.setTypedText(touchgfx::TypedText(T_SINGLEUSEID237));
    addevent.add(pttxt);

    sbtxt.setXY(363, 17);
    sbtxt.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    sbtxt.setLinespacing(0);
    sbtxt.setTypedText(touchgfx::TypedText(T_SINGLEUSEID238));
    addevent.add(sbtxt);

    vstxt.setXY(427, 17);
    vstxt.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    vstxt.setLinespacing(0);
    vstxt.setTypedText(touchgfx::TypedText(T_SINGLEUSEID239));
    addevent.add(vstxt);

    TempSliderLeft.setXY(51, 172);
    TempSliderLeft.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
    TempSliderLeft.setupHorizontalSlider(3, 7, 0, 0, 125);
    TempSliderLeft.setValueRange(13, 90);
    TempSliderLeft.setValue(90);
    TempSliderLeft.setNewValueCallback(sliderValueChangedCallback);
    addevent.add(TempSliderLeft);

    tempInd.setXY(13, 169);
    tempInd.setColor(touchgfx::Color::getColorFrom24BitRGB(10, 0, 0));
    tempInd.setLinespacing(0);
    Unicode::snprintf(tempIndBuffer, TEMPIND_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID240).getText());
    tempInd.setWildcard(tempIndBuffer);
    tempInd.resizeToCurrentText();
    tempInd.setTypedText(touchgfx::TypedText(T_TEXTID2));
    addevent.add(tempInd);

    temp2.setXY(77, 153);
    temp2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    temp2.setLinespacing(0);
    temp2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID241));
    addevent.add(temp2);

    add(addevent);
    day.add(pnbt);
    day.add(vtbt);
    day.add(srbt);
    day.add(chtbt);
    day.add(ptbt);
    day.add(sbbt);
    day.add(vsbt);
}

void addeventBase::initialize()
{

}

void addeventBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &closebt2)
    {
        //Close
        //When closebt2 clicked call virtual function
        //Call Close
        Close();
    }
    else if (&src == &hoursDownLeftbt)
    {
        //HoursDownLeft
        //When hoursDownLeftbt clicked call virtual function
        //Call HoursDownLeft
        HoursDownLeft();
    }
    else if (&src == &hoursUpLeftbt)
    {
        //HoursUpLeft
        //When hoursUpLeftbt clicked call virtual function
        //Call HoursUpLeft
        HoursUpLeft();
    }
    else if (&src == &savebt)
    {
        //AddNewEvent
        //When savebt clicked call virtual function
        //Call AddNewEvent
        AddNewEvent();
    }
    else if (&src == &minutesDownLeftbt)
    {
        //MinutesDownLeft
        //When minutesDownLeftbt clicked call virtual function
        //Call MinutesDownLeft
        MinutesDownLeft();
    }
    else if (&src == &minutesUpLeftbt)
    {
        //MinutesUpLeft
        //When minutesUpLeftbt clicked call virtual function
        //Call MinutesUpLeft
        MinutesUpLeft();
    }
    else if (&src == &downClockTopbt)
    {
        //HoursDownTop
        //When downClockTopbt clicked call virtual function
        //Call HoursDownTop
        HoursDownTop();
    }
    else if (&src == &upClockTopbt)
    {
        //HoursUpTop
        //When upClockTopbt clicked call virtual function
        //Call HoursUpTop
        HoursUpTop();
    }
    else if (&src == &downClockBottombt)
    {
        //HoursDownBottom
        //When downClockBottombt clicked call virtual function
        //Call HoursDownBottom
        HoursDownBottom();
    }
    else if (&src == &upClockBottombt)
    {
        //HoursUpBottom
        //When upClockBottombt clicked call virtual function
        //Call HoursUpBottom
        HoursUpBottom();
    }
}

void addeventBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &TempSliderLeft)
    {
        //ChangeTemp
        //When TempSliderLeft value changed call virtual function
        //Call ChangeTemp
        ChangeTemp(value);
    }
}
