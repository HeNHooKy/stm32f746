/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/manualboard_screen/manualboardViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

manualboardViewBase::manualboardViewBase() :
    buttonCallback(this, &manualboardViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &manualboardViewBase::sliderValueChangedCallbackHandler)
{

    fon1.setXY(0, 0);

    skin11.setXY(0, 0);

    hoursDownLeft.setXY(14, 65);
    hoursDownLeft.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_PASSED_ID));
    hoursDownLeft.setDelay(60);
    hoursDownLeft.setInterval(6);
    hoursDownLeft.setAction(buttonCallback);

    hoursUpLeft.setXY(69, 65);
    hoursUpLeft.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_PASSED_ID));
    hoursUpLeft.setDelay(60);
    hoursUpLeft.setInterval(6);
    hoursUpLeft.setAction(buttonCallback);

    TempSliderLeft.setXY(47, 143);
    TempSliderLeft.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
    TempSliderLeft.setupHorizontalSlider(3, 7, 0, 0, 125);
    TempSliderLeft.setValueRange(20, 40);
    TempSliderLeft.setValue(40);
    TempSliderLeft.setNewValueCallback(sliderValueChangedCallback);

    timerHoursLeft.setXY(45, 67);
    timerHoursLeft.setColor(touchgfx::Color::getColorFrom24BitRGB(8, 0, 0));
    timerHoursLeft.setLinespacing(0);
    Unicode::snprintf(timerHoursLeftBuffer, TIMERHOURSLEFT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID12).getText());
    timerHoursLeft.setWildcard(timerHoursLeftBuffer);
    timerHoursLeft.resizeToCurrentText();
    timerHoursLeft.setTypedText(touchgfx::TypedText(T_TEXTID2));

    tempLeftInd.setXY(9, 140);
    tempLeftInd.setColor(touchgfx::Color::getColorFrom24BitRGB(10, 0, 0));
    tempLeftInd.setLinespacing(0);
    Unicode::snprintf(tempLeftIndBuffer, TEMPLEFTIND_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID13).getText());
    tempLeftInd.setWildcard(tempLeftIndBuffer);
    tempLeftInd.resizeToCurrentText();
    tempLeftInd.setTypedText(touchgfx::TypedText(T_TEXTID2));

    temp2.setXY(73, 124);
    temp2.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    temp2.setLinespacing(0);
    temp2.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));

    hour1.setXY(48, 42);
    hour1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    hour1.setLinespacing(0);
    hour1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID15));

    minute1.setXY(155, 42);
    minute1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    minute1.setLinespacing(0);
    minute1.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));

    minutesDownLeft.setXY(129, 65);
    minutesDownLeft.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_PASSED_ID));
    minutesDownLeft.setDelay(60);
    minutesDownLeft.setInterval(6);
    minutesDownLeft.setAction(buttonCallback);

    timerMinutesLeft.setXY(160, 67);
    timerMinutesLeft.setColor(touchgfx::Color::getColorFrom24BitRGB(10, 0, 0));
    timerMinutesLeft.setLinespacing(0);
    Unicode::snprintf(timerMinutesLeftBuffer, TIMERMINUTESLEFT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID17).getText());
    timerMinutesLeft.setWildcard(timerMinutesLeftBuffer);
    timerMinutesLeft.resizeToCurrentText();
    timerMinutesLeft.setTypedText(touchgfx::TypedText(T_TEXTID2));

    minutesUpLeft.setXY(184, 65);
    minutesUpLeft.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_PASSED_ID));
    minutesUpLeft.setDelay(60);
    minutesUpLeft.setInterval(6);
    minutesUpLeft.setAction(buttonCallback);

    hoursDownRight.setXY(253, 65);
    hoursDownRight.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_PASSED_ID));
    hoursDownRight.setDelay(60);
    hoursDownRight.setInterval(6);
    hoursDownRight.setAction(buttonCallback);

    hoursUpRight.setXY(308, 65);
    hoursUpRight.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_PASSED_ID));
    hoursUpRight.setDelay(60);
    hoursUpRight.setInterval(6);
    hoursUpRight.setAction(buttonCallback);

    StartLeft.setXY(75, 185);
    StartLeft.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_ON_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_ON2_ID));
    StartLeft.setAction(buttonCallback);

    StartRight.setXY(319, 185);
    StartRight.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_ON_ID), touchgfx::Bitmap(BITMAP_BLUE_TOGGLEBARS_ON2_ID));
    StartRight.setAction(buttonCallback);

    TempSliderRight.setXY(291, 143);
    TempSliderRight.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_BACK_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_SLIDER_HORIZONTAL_SMALL_ROUND_FILL_ID), touchgfx::Bitmap(BITMAP_BLUE_SLIDER_HORIZONTAL_SMALL_INDICATORS_SLIDER_HORIZONTAL_SMALL_ROUND_KNOB_ID));
    TempSliderRight.setupHorizontalSlider(3, 7, 0, 0, 125);
    TempSliderRight.setValueRange(20, 40);
    TempSliderRight.setValue(40);
    TempSliderRight.setNewValueCallback(sliderValueChangedCallback);

    timerHoursRight.setXY(284, 67);
    timerHoursRight.setColor(touchgfx::Color::getColorFrom24BitRGB(8, 0, 0));
    timerHoursRight.setLinespacing(0);
    Unicode::snprintf(timerHoursRightBuffer, TIMERHOURSRIGHT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID20).getText());
    timerHoursRight.setWildcard(timerHoursRightBuffer);
    timerHoursRight.resizeToCurrentText();
    timerHoursRight.setTypedText(touchgfx::TypedText(T_TEXTID2));

    tempRightInd.setXY(250, 140);
    tempRightInd.setColor(touchgfx::Color::getColorFrom24BitRGB(8, 0, 0));
    tempRightInd.setLinespacing(0);
    Unicode::snprintf(tempRightIndBuffer, TEMPRIGHTIND_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID21).getText());
    tempRightInd.setWildcard(tempRightIndBuffer);
    tempRightInd.resizeToCurrentText();
    tempRightInd.setTypedText(touchgfx::TypedText(T_TEXTID2));

    temp24.setXY(318, 124);
    temp24.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    temp24.setLinespacing(0);
    temp24.setTypedText(touchgfx::TypedText(T_SINGLEUSEID22));

    hour.setXY(284, 42);
    hour.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    hour.setLinespacing(0);
    hour.setTypedText(touchgfx::TypedText(T_SINGLEUSEID23));

    minute.setXY(394, 42);
    minute.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    minute.setLinespacing(0);
    minute.setTypedText(touchgfx::TypedText(T_SINGLEUSEID24));

    minutesDownRight.setXY(368, 65);
    minutesDownRight.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_BACK_ARROW_PASSED_ID));
    minutesDownRight.setDelay(60);
    minutesDownRight.setInterval(6);
    minutesDownRight.setAction(buttonCallback);

    timerMinutesRight.setXY(399, 67);
    timerMinutesRight.setColor(touchgfx::Color::getColorFrom24BitRGB(5, 0, 0));
    timerMinutesRight.setLinespacing(0);
    Unicode::snprintf(timerMinutesRightBuffer, TIMERMINUTESRIGHT_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID25).getText());
    timerMinutesRight.setWildcard(timerMinutesRightBuffer);
    timerMinutesRight.resizeToCurrentText();
    timerMinutesRight.setTypedText(touchgfx::TypedText(T_TEXTID2));

    minutesUpRight.setXY(423, 65);
    minutesUpRight.setBitmaps(touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_ID), touchgfx::Bitmap(BITMAP_DARK_ICONS_NEXT_ARROW_PASSED_ID));
    minutesUpRight.setDelay(60);
    minutesUpRight.setInterval(6);
    minutesUpRight.setAction(buttonCallback);

    shoesmodul1.setXY(244, 26);
    shoesmodul1.setVisible(false);

    dressmodul1.setXY(0, 26);
    dressmodul1.setVisible(false);

    msgBox1.setXY(0, 0);
    msgBox1.setVisible(false);

    add(fon1);
    add(skin11);
    add(hoursDownLeft);
    add(hoursUpLeft);
    add(TempSliderLeft);
    add(timerHoursLeft);
    add(tempLeftInd);
    add(temp2);
    add(hour1);
    add(minute1);
    add(minutesDownLeft);
    add(timerMinutesLeft);
    add(minutesUpLeft);
    add(hoursDownRight);
    add(hoursUpRight);
    add(StartLeft);
    add(StartRight);
    add(TempSliderRight);
    add(timerHoursRight);
    add(tempRightInd);
    add(temp24);
    add(hour);
    add(minute);
    add(minutesDownRight);
    add(timerMinutesRight);
    add(minutesUpRight);
    add(shoesmodul1);
    add(dressmodul1);
    add(msgBox1);
}

void manualboardViewBase::setupScreen()
{
    fon1.initialize();
    skin11.initialize();
    shoesmodul1.initialize();
    dressmodul1.initialize();
    msgBox1.initialize();
}

void manualboardViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &hoursDownLeft)
    {
        //hoursDownLeft
        //When hoursDownLeft clicked call virtual function
        //Call HoursDownLeft
        HoursDownLeft();
    }
    else if (&src == &hoursUpLeft)
    {
        //hoursUpLeft
        //When hoursUpLeft clicked call virtual function
        //Call HoursUpLeft
        HoursUpLeft();
    }
    else if (&src == &minutesDownLeft)
    {
        //minutesDownLeft
        //When minutesDownLeft clicked call virtual function
        //Call MinutesDownLeft
        MinutesDownLeft();
    }
    else if (&src == &minutesUpLeft)
    {
        //minutesUpLeft
        //When minutesUpLeft clicked call virtual function
        //Call MinutesUpLeft
        MinutesUpLeft();
    }
    else if (&src == &hoursDownRight)
    {
        //hoursDownRight
        //When hoursDownRight clicked call virtual function
        //Call HoursDownRight
        HoursDownRight();
    }
    else if (&src == &hoursUpRight)
    {
        //hoursUpRight
        //When hoursUpRight clicked call virtual function
        //Call HoursUpRight
        HoursUpRight();
    }
    else if (&src == &StartLeft)
    {
        //startDryLeft
        //When StartLeft clicked call virtual function
        //Call StartDryLeft
        StartDryLeft();
    }
    else if (&src == &StartRight)
    {
        //startDryRight
        //When StartRight clicked call virtual function
        //Call StartDryRight
        StartDryRight();
    }
    else if (&src == &minutesDownRight)
    {
        //minutesDownRight
        //When minutesDownRight clicked call virtual function
        //Call MinutesDownRight
        MinutesDownRight();
    }
    else if (&src == &minutesUpRight)
    {
        //minutesUpRight
        //When minutesUpRight clicked call virtual function
        //Call MinutesUpRight
        MinutesUpRight();
    }
}

void manualboardViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &TempSliderLeft)
    {
        //tempLeftUpdate
        //When TempSliderLeft value changed call virtual function
        //Call ChangeTempLeft
        ChangeTempLeft(value);
    }
    else if (&src == &TempSliderRight)
    {
        //tempRightUpdate
        //When TempSliderRight value changed call virtual function
        //Call ChangeTempRight
        ChangeTempRight(value);
    }
}
