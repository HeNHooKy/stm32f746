/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef ADDEVENTBASE_HPP
#define ADDEVENTBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <touchgfx/containers/Container.hpp>
#include <touchgfx/containers/ModalWindow.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/RepeatButton.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/RadioButton.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/RadioButtonGroup.hpp>

class addeventBase : public touchgfx::Container
{
public:
    addeventBase();
    virtual ~addeventBase() {}
    virtual void initialize();

    /*
     * Virtual Action Handlers
     */
    virtual void HoursDownLeft()
    {
        // Override and implement this function in addevent
    }

    virtual void HoursUpLeft()
    {
        // Override and implement this function in addevent
    }

    virtual void MinutesDownLeft()
    {
        // Override and implement this function in addevent
    }

    virtual void MinutesUpLeft()
    {
        // Override and implement this function in addevent
    }

    virtual void HoursDownTop()
    {
        // Override and implement this function in addevent
    }

    virtual void HoursUpTop()
    {
        // Override and implement this function in addevent
    }

    virtual void HoursDownBottom()
    {
        // Override and implement this function in addevent
    }

    virtual void HoursUpBottom()
    {
        // Override and implement this function in addevent
    }

    virtual void Close()
    {
        // Override and implement this function in addevent
    }

    virtual void ChangeTemp(int value)
    {
        // Override and implement this function in addevent
    }

    virtual void AddNewEvent()
    {
        // Override and implement this function in addevent
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::ModalWindow addevent;
    touchgfx::ButtonWithLabel closebt2;
    touchgfx::RepeatButton hoursDownLeftbt;
    touchgfx::RepeatButton hoursUpLeftbt;
    touchgfx::TextAreaWithOneWildcard timerHoursLeft;
    touchgfx::TextArea hour11;
    touchgfx::ButtonWithLabel savebt;
    touchgfx::TextArea minute1;
    touchgfx::RepeatButton minutesDownLeftbt;
    touchgfx::TextAreaWithOneWildcard timerMinutesLeft;
    touchgfx::RepeatButton minutesUpLeftbt;
    touchgfx::TextArea timestarttext;
    touchgfx::RepeatButton downClockTopbt;
    touchgfx::RepeatButton upClockTopbt;
    touchgfx::TextAreaWithOneWildcard timerHoursTop;
    touchgfx::TextArea hour2;
    touchgfx::TextArea timeclock1;
    touchgfx::RepeatButton downClockBottombt;
    touchgfx::RepeatButton upClockBottombt;
    touchgfx::TextAreaWithOneWildcard timerHoursBottom;
    touchgfx::TextArea hour1;
    touchgfx::TextArea timeclock2;
    touchgfx::RadioButton pnbt;
    touchgfx::RadioButton vtbt;
    touchgfx::RadioButton srbt;
    touchgfx::RadioButton chtbt;
    touchgfx::RadioButton ptbt;
    touchgfx::RadioButton sbbt;
    touchgfx::RadioButton vsbt;
    touchgfx::TextArea pntxt;
    touchgfx::TextArea vttxt;
    touchgfx::TextArea srtxt;
    touchgfx::TextArea chttxt;
    touchgfx::TextArea pttxt;
    touchgfx::TextArea sbtxt;
    touchgfx::TextArea vstxt;
    touchgfx::Slider TempSliderLeft;
    touchgfx::TextAreaWithOneWildcard tempInd;
    touchgfx::TextArea temp2;
    touchgfx::RadioButtonGroup<7> day;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TIMERHOURSLEFT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar timerHoursLeftBuffer[TIMERHOURSLEFT_SIZE];
    static const uint16_t TIMERMINUTESLEFT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar timerMinutesLeftBuffer[TIMERMINUTESLEFT_SIZE];
    static const uint16_t TIMERHOURSTOP_SIZE = 10;
    touchgfx::Unicode::UnicodeChar timerHoursTopBuffer[TIMERHOURSTOP_SIZE];
    static const uint16_t TIMERHOURSBOTTOM_SIZE = 10;
    touchgfx::Unicode::UnicodeChar timerHoursBottomBuffer[TIMERHOURSBOTTOM_SIZE];
    static const uint16_t TEMPIND_SIZE = 10;
    touchgfx::Unicode::UnicodeChar tempIndBuffer[TEMPIND_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<addeventBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<addeventBase, const touchgfx::Slider&, int> sliderValueChangedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);

};

#endif // ADDEVENTBASE_HPP
